generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  email             String    @unique
  firstName         String?
  lastName          String?
  gender            String?
  profileImageUrl   String?
  userId            String    @unique
  subscription      String?
  
  // Relationships
  projects          TeamMember[]
  tasks             Task[]
  payments          Payment[]      // Back-reference to Payment
  subscriptions     Subscription[] // Back-reference to Subscription

  Invoice Invoice[]
}

model Payment {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  stripeId         String
  email            String
  amount           String
  paymentTime      String
  paymentDate      String
  currency         String
  userId           Int?     // Ensure this is an Int to match User id

  // Optional relation to User
  user             User?    @relation(fields: [userId], references: [id])
}

model Subscription {
  id                        Int      @id @default(autoincrement())
  createdAt                 DateTime @default(now())
  subscriptionId            String
  stripeUserId              String
  status                    String
  startDate                 String
  endDate                   String?
  planId                    String
  defaultPaymentMethodId     String?
  email                     String
  userId                    Int?     // Ensure this is an Int to match User id

  // Optional relation to User
  user                      User?    @relation(fields: [userId], references: [id])
}


model Invoice {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  invoiceId       String
  subscriptionId  String
  amountPaid      String
  amountDue       String?
  currency        String
  status          String
  email           String
  userId          Int?
  // Optional relation to User
  user            User?    @relation(fields: [userId], references: [id])
}

model SubscriptionPlan {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  planId       String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}


model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  websiteUrl  String    // New field for the project's website URL
  createdAt   DateTime       @default(now())

  // Relationships
  teamMembers TeamMember[]
  audits      Audit[]
  tasks       Task[]
}

model TeamMember {
  id        String    @id @default(uuid())
  userId    Int
  projectId String
  role      Role

  // Relationships
  user      User      @relation(fields: [userId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])
}

model Task {
  id          String    @id @default(uuid())
  projectId   String
  userId      Int
  name        String
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(Pending)

  // Relationships
  project     Project   @relation(fields: [projectId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Audit {
  id          String   @id @default(uuid())
  projectId   String
  seoScore    Int
  performance Int
  auditDate   DateTime @default(now())
  project     Project   @relation(fields: [projectId], references: [id])
}

enum Role {
  Admin
  Manager
  Viewer
}

enum TaskStatus {
  Pending
  InProgress
  Completed
}
